@if (@product != null)
{
    <div class="cardChild  p-1 containerCard">
        <div>
            <img src="~/../images/ProductsImages/@product.ImageUrl.ToString()" class="img-fluid" alt="@product.SeoName" />
            <p class="card-group  d-flex justify-content-around py-0 my-1">
                @foreach (var picture in product.Pictures.ToList())
                {
                    <button @onclick="() => productService.GetPicturePath(picture.IdPictures, product.IdProduct)">
                        <img src="~/../images/ProductsImages/Pictures/@picture.UrlPicture" class="img-fluid" style="height:75px" alt="@product.SeoName" />
                    </button>
                }
            </p>
            <h1 class="cardTitle text-center mb-1">@product.Name *****</h1>
            <div class="d-flex justify-content-between align-items-center">
                <p class="d-flex justify-content-between bg-dark align-items-center py-0 my-0">
                    @if (product.Quantity > 0)
                    {
                        <button class="btn btn-dark d-block" type="button" @onclick="() => ExecuteAddtoCart(product.IdProduct) ">
                            Ajouter                             <span>@product.SalesPrice.ToString("C")</span>
                        </button>
                        <button class="btn btn-dark   d-block" type="button" @onclick="() => ExecuteDeleteCartItem(product.IdProduct)">-</button>
                    }
                    else
                    {
                        <button class="btn btn-dark btnAddAcc d-block">
                            Rupture de stock
                        </button>
                    }
                </p>
                <a href="Details/@product.IdProduct">en savoir plus</a>
            </div>
        </div>
    </div>
}
@code{
    [CascadingParameter] private EventCallback notify { get; set; }
    [Parameter] public int idProduct { get; set; }
    [Inject] ICart carteService { get; set; }
    [Inject] IProduct productService { get; set; }
    private Product product { get; set; }
    private Cart LocalCart { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        LocalCart = await carteService.InitializeShoppingCart();
        await base.OnParametersSetAsync();
    }
    protected async override Task OnInitializedAsync()
    {
        product = await productService.GetProductByIdIncludePictureAsync(idProduct);
        await base.OnInitializedAsync();
    }
    private async Task ExecuteAddtoCart(int IdProduct)
    {
        await carteService.AddCart(IdProduct);
        await notify.InvokeAsync();
    }
    private async Task ExecuteDeleteCartItem(int IdProduct)
    {
        await carteService.DeleteItem(IdProduct);
        await notify.InvokeAsync();
    }

}