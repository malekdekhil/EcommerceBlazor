@page "/Boutique"
<section class="container-fluid">
    @if (ProductsIncludePictures != null)
    {
        @foreach (var c in categories.ToList())
        {<p>@c.CategoryName</p>
        <div class="containerCard">
            @foreach (var p in ProductsIncludePictures.Where(a => a.IdCategory_Fk == c.IdCategory).ToList())
            {
              <ProductComponent product="p" />  
            }
        </div>

    }
    }
</section>
@code{
    [CascadingParameter]
    private EventCallback notify { get; set; }
    [Inject] ICart carteService { get; set; }
    [Inject] IProduct productService { get; set; }
    [Inject] ICategory categoryService { get; set; }
    private IEnumerable<Product> ProductsIncludePictures { get; set; }
    private Cart LocalCart { get; set; }
    private IEnumerable<Category> categories { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (LocalCart != null)
            {
                LocalCart = await carteService.UpdateCartInfos(LocalCart, null);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.GetAllCategoryAsync();
        ProductsIncludePictures = await productService.GetAllProductsIncludePicturesAsync();
        await base.OnInitializedAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        LocalCart = await carteService.InitializeShoppingCart();
        await base.OnParametersSetAsync();
    }
    private async Task ExecuteAddtoCart(int IdProduct)
    {
        await carteService.AddCart(IdProduct);
        await notify.InvokeAsync();
    }
    private async Task ExecuteDeleteCartItem(int IdProduct)
    {
        await carteService.DeleteItem(IdProduct);
        await notify.InvokeAsync();
    }
}