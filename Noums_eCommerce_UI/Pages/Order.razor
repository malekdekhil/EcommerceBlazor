@page "/Order"
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity


<section>
    @if (LocalCart != null)
    {
        @foreach (var cartItem in LocalCart.ListProducts)
        {
            <p>name: @cartItem.ProductName</p>
            <p>quantity:@cartItem.ProductQuantity </p>
            <p>sales price: @cartItem.ProductPrice</p>
            <p>Total par produit Ht: @cartItem.TotalItem.ToString("C")</p>
            <button class="btn btn-primary" type="button" @onclick="() => ExecuteDeleteCartItem(cartItem.ProductId)">- </button>
            <button class="btn btn-primary" type="button" @onclick="() => ExecuteAddtoCart(cartItem.ProductId)"> + </button>
        }
        @if (LocalCart.Total > 0)
        {
            <span>Total: @LocalCart.ListProducts.Sum(a => a.TotalItem)</span>
            <button class="btn btn-danger" type="button" @onclick="ExecuteClearCart">vider le panier</button>

            @if (@User.UserName != null)
            {
                <form>
                    paiement direct
                </form>
            }
            else
            {
                <EditForm Model="@_UserTmp">
                    <DataAnnotationsValidator />
                    <div class="d-flex flex-column align-items-center w-50">
                        <p>
                            <label for="@_UserTmp.FirstName"> </label>
                            <InputText id="FirstName" @bind-Value="_UserTmp.FirstName" />
                            <ValidationMessage For="() => _UserTmp.FirstName" />
                        </p>
                        <p>
                            <label for="@_UserTmp.LastName"> </label>
                            <InputText id="LastName" @bind-Value="_UserTmp.LastName" />
                            <ValidationMessage For="() => _UserTmp.LastName" />
                        </p>
                        <p>
                            <label for="@_UserTmp.EmailTmp"> </label>
                            <InputText id="Email" @bind-Value="_UserTmp.EmailTmp" />
                            <ValidationMessage For="() => _UserTmp.EmailTmp" />
                        </p>
                        <p>
                            <label for="@_UserTmp.Address"> </label>
                            <InputText id="Address" @bind-Value="_UserTmp.Address" />
                            <ValidationMessage For="() => _UserTmp.Address" />
                        </p>
                        <p>
                            <label for="@_UserTmp.Country"> </label>
                            <InputText id="Country" @bind-Value="_UserTmp.Country" />
                            <ValidationMessage For="() => _UserTmp.Country" />
                        </p>
                        <p>
                            <label for="@_UserTmp.City"> </label>
                            <InputText id="City" @bind-Value="_UserTmp.City" />
                            <ValidationMessage For="() => _UserTmp.City" />
                        </p>
                        <p>
                            <label for="@_UserTmp.CodeZip"> </label>
                            <InputText id="CodeZip" @bind-Value="_UserTmp.CodeZip" />
                            <ValidationMessage For="() => _UserTmp.CodeZip" />
                        </p>
                        <p>
                            <button type="submit" @onclick="()=>UserTmpValidation()">Submit</button>
                        </p>
                    </div>
                </EditForm>
           
            }
        }
        else
        {
            <p>Votre panier est vide</p>
        }
    }
    else
    {
        <p>Votre panier est vide</p>
    }
</section>

@code{
    [Inject] ICart carteService { get; set; }
    [Inject] IOrder orderService { get; set; }
    [Inject] IShoppingUserTmp shoppingUserTmpService { get; set; }
    [Inject] UserManager<AppUser> userManager { get; set; }
    [Inject] AppUser User { get; set; }
    private UserTmp _UserTmp { get; set; }
    [Inject] IHttpContextAccessor httpContextAccessor { get; set; }
    private IEnumerable<Product> ProductsIncludePictures { get; set; }
    private Cart LocalCart { get; set; }
    [CascadingParameter]
    private EventCallback notify { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LocalCart = await carteService.InitializeShoppingCart();
            if(LocalCart != null)
            {
                await ExecuteCheckDisponibility();
                LocalCart = await carteService.UpdateCartInfos(LocalCart, null);
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {
        _UserTmp = await shoppingUserTmpService.InitializeShoppingUserTmp();
        User.UserName = httpContextAccessor.HttpContext.User.Identity.Name;
        if (User.UserName != null)
        {
            User = await userManager.FindByNameAsync(User.UserName);
        }
        await base.OnInitializedAsync();
    }
    private async Task ExecuteAddtoCart(int IdProduct)
    {
        await carteService.AddCart(IdProduct);
        await notify.InvokeAsync();
    }
    private async Task ExecuteDeleteCartItem(int IdProduct)
    {
        await carteService.DeleteItem(IdProduct);
        await notify.InvokeAsync();
    }

    private async Task ExecuteClearCart()
    {
        await carteService.ClearCart();
        await notify.InvokeAsync();
    }
    private async Task UserTmpValidation()
    {
        if (
            _UserTmp.LastName != null && _UserTmp.FirstName != null && _UserTmp.EmailTmp != null
            && _UserTmp.Address != null && _UserTmp.Country != null && _UserTmp.City != null && _UserTmp.CodeZip != null
            )
        {

            await shoppingUserTmpService.TransactionOrderUserTmp();
        }
    }
    private async Task ExecuteCheckDisponibility()
    {
        await carteService.CheckDisponibility();
        await notify.InvokeAsync();
    }
}