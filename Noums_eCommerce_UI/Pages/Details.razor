@page  "/details/{idProduct:int}"
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity

@if (idProduct > 0)
{
    if (product != null)
    {
        <span>@product.Name</span>
        <span>@product.LongDescription</span>
        <span>@product.ShortDescription</span>
        <span>@product.SalesPrice</span>
        <button class="btn btn-primary" type="button" @onclick="() => ExecuteDeleteCartItem(product.IdProduct)">- </button>
        <button class="btn btn-primary" type="button" @onclick="() => ExecuteAddtoCart(product.IdProduct)"> + </button>





    }
  
    if (@User.UserName != null)
    {
        <form>
            formulaire de commentaire
        </form>

        // si produit acheter user peux faire un commentaire
    }
}



@code {
    [Parameter] public int idProduct { get; set; }
    [CascadingParameter] public EventCallback notify { get; set; }
    [Inject] IProduct productService { get; set; }
    [Inject] ICart carteService { get; set; }
    [Inject] NavigationManager navigationManager { get; set; }
    [Inject] UserManager<AppUser> userManager { get; set; }
    [Inject] AppUser User { get; set; }
    [Inject] IHttpContextAccessor httpContextAccessor { get; set; }

    private Product product { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        product = await productService.GetProductByIdAsync(idProduct);
        await base.OnParametersSetAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        User.UserName = httpContextAccessor.HttpContext.User.Identity.Name;
        if (User.UserName != null)
        {
            User = await userManager.FindByNameAsync(User.UserName);

        }
        await base.OnInitializedAsync();
    }

    protected async Task ExecuteAddtoCart(int IdProduct)
    {
        await carteService.AddCart(IdProduct);
        await notify.InvokeAsync();
    }
    protected async Task ExecuteDeleteCartItem(int IdProduct)
    {
        await carteService.DeleteItem(IdProduct);
        await notify.InvokeAsync();
    }
}
