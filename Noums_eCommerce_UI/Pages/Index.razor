@page "/"
@if (ProductsIncludePictures != null)
{
    @foreach (var product in ProductsIncludePictures.ToList())
    {
        <div class="cardChild my-2">
            <img src="~/../images/ProductsImages/@product.ImageUrl.ToString()" class="img-fluid" alt="@product.SeoName" />
            <p class="card-group">
                @foreach (var picture in product.Pictures.ToList())
                {
                    <button @onclick="() => productService.GetPicturePath(picture.IdPictures, product.IdProduct)">
                        <img src="~/../images/ProductsImages/Pictures/@picture.UrlPicture" class="img-fluid" style="height:100px" alt="@product.SeoName" />
                    </button>
                }
            </p>
            <h1 class="cardTitle">@product.Name</h1>
            <a href="Details/@product.IdProduct">Details</a>
            <p class="cardLinkContainer">
                @if (product.Quantity > 0)
                {
                    <span>@product.IdProduct</span>
                    <span>@product.SalesPrice</span>
                    <button class="btn btn-primary" type="button" @onclick="() => ExecuteAddtoCart(product.IdProduct) "> + </button>
                    <button class="btn btn-primary" type="button" @onclick="() => ExecuteDeleteCartItem(product.IdProduct)"> - </button>
                }
                else
                {
                    <button class="btn btn-dark btnAddAcc d-block">
                        Rupture de stock
                    </button>
                }
            </p>
        </div>
    }
}
 

@code{
    [Inject] ICart carteService { get; set; }
    [Inject] IProduct productService { get; set; }
    private IEnumerable<Product> ProductsIncludePictures { get; set; }
    private Cart LocalCart { get; set; }
    [CascadingParameter]
    private EventCallback notify { get; set; }
    protected override async Task OnInitializedAsync()
    {

        ProductsIncludePictures = await productService.GetAllProductsIncludePicturesAsync();
        LocalCart = await carteService.InitializeShoppingCart();

        base.OnInitialized();
    }
    protected async Task ExecuteAddtoCart(int IdProduct)
    {
        await carteService.AddCart(IdProduct);
        await notify.InvokeAsync();

    }

    protected async Task ExecuteDeleteCartItem(int IdProduct)
    {
        await carteService.DeleteItem(IdProduct);
        await notify.InvokeAsync();



    }


}