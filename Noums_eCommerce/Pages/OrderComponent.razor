@*@page "/Order"
@inherits ProductsComponent
@inject ProtectedLocalStorage LocalStorage;
@if (_Cart != null)
{
    @foreach (var productSession in _Cart.ListProducts.ToList())
    {


        <p>Product Name: @productSession.ProductName</p>
        <p>Price: @productSession.ProductPrice</p>
        <p>Quantity: @productSession.ProductQuantity</p>
        <p>Total: @productSession.Total</p>
        <p>
            Quantity: @productSession.ProductQuantity
            <button class="btn btn-primary" type="button" @onclick="()=>GetAddToCart(productSession.ProductId)"> + </button>
            <button class="btn btn-primary" type="button" @onclick="()=>RemoveCartItem(productSession.ProductId)"> - </button>

        </p>


    }
    if (_Cart.Total > 0)
    {
        <span>Total </span> <p>@_Cart.Total</p>
        <button class="btn btn-danger" type="button" @onclick="ClearBasket">vider le panier</button>
    }

}
@code {


    protected override async Task OnInitializedAsync()
    {
        var result = await LocalStorage.GetAsync<Cart>("Cart");
        _Cart = result.Success ? result.Value : null;

    }

    protected async void GetAddToCart(int id)
    {
        if (_Cart != null)
        {
            //si null je fait une instance
            if (_Cart == null)
            {
                _Cart = new Cart();
            }
            // je recupere le produit que je dois ajouter a Cart
            var productById = ProductsIncludePictures.ToList().Where(a => a.IdProduct == id).FirstOrDefault();
            //je crée CartItem
            _CartItem = _Cart.ListProducts.Where(a => a.ProductId == productById.IdProduct).FirstOrDefault();
            //verif
            //ajout cartItem a Cart
            if (_CartItem != null)
            {
                foreach (var session in _Cart.ListProducts.ToList())
                {
                    if (session.ProductId == productById.IdProduct && session.ProductPrice != productById.SalesPrice)
                    {

                        session.ProductPrice = productById.SalesPrice;

                    }
                }
                if (productById.Quantity > _CartItem.ProductQuantity)
                {
                    _CartItem.ProductQuantity++;

                }
                _CartItem.Total = _CartItem.ProductPrice * _CartItem.ProductQuantity;

            }
            else
            {

                _Cart.ListProducts.Add(
                new CartItem()
                {
                    ProductId = productById.IdProduct,
                    ProductName = productById.Name,
                    ProductPrice = productById.SalesPrice,
                    shippingPrice = productById.ShippingPrice,
                    TVA = productById.Tva,
                    ProductQuantity = 1,
                    Total = productById.SalesPrice,
                    ProductUrlImage = productById.ImageUrl,

                });
            }

            //calcul total...
            _Cart.Total = _Cart.ListProducts.Sum(a => a.Total);
            _Cart.TotalAllItems = _Cart.ListProducts.Sum(t => t.Total);
            //CartItem CartItem =



            await LocalStorage.SetAsync("Cart", _Cart);
            var result = await LocalStorage.GetAsync<Cart>("Cart");
            _Cart = result.Value;

        }
    }

    //protected async void GetRemoveCartItem(int idProduct)
    //{
    //    if (_Cart != null)
    //    {

    //        RemoveCartItem(idProduct);


    //    }
    //}
    protected void RemoveItem(int id)
    {
        _Cart.ListProducts.Remove(_Cart.ListProducts.Where(a => a.ProductId == Convert.ToInt64(id)).FirstOrDefault());
        _Cart.TotalAllItems = _Cart.ListProducts.Sum(a => a.Total);
        _Cart.Total = _Cart.ListProducts.Sum(a => a.Total);

    }
    protected async Task RemoveCartItem(int idProduct)
    {
        if (_Cart != null)
        {
            _CartItem = _Cart.ListProducts.FirstOrDefault(a => a.ProductId == idProduct);
            if (_CartItem != null)
            {
                if (_CartItem.ProductQuantity > 0)
                {
                    _CartItem.ProductQuantity = _CartItem.ProductQuantity - 1;

                    _CartItem.Total = _CartItem.Total - _CartItem.ProductPrice;

                    //calcul total...
                    _Cart.Total = _Cart.ListProducts.Sum(a => a.Total);
                    _Cart.TotalAllItems = _Cart.ListProducts.Sum(t => t.Total);

                }
                if (_CartItem.ProductQuantity == 0)
                {
                    RemoveItem(_CartItem.ProductId);
                }
                await LocalStorage.SetAsync("Cart", _Cart);

            }

        }


    }
    protected async Task ClearBasket()
    {
        if (_Cart != null)
        {
            await LocalStorage.DeleteAsync("Cart");
            var result = await LocalStorage.GetAsync<Cart>("Cart");
            _Cart = result.Value;
        }
    }

    public void GetPicturePath(int idPicture, int idProduct)
    {

        foreach (var prod in ProductsIncludePictures.Where(a => a.IdProduct == idProduct))
        {
            foreach (var pics in prod.Pictures.Where(a => a.IdProduct_Fk == idProduct && a.IdPictures == idPicture))
            {

                prod.ImageUrl = "Pictures/" + pics.UrlPicture;

            }
        }
    }


}*@
