@page "/"
@inherits ProductsModel;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;


@if (ProductsIncludePictures != null)
{
    @foreach (var product in ProductsIncludePictures.ToList())
    {
        <div class="cardChild my-2">

            <img src="~/../images/ProductsImages/@product.ImageUrl.ToString()" class="img-fluid" alt="@product.SeoName" />

            @foreach (var picture in product.Pictures.ToList())
            {


                <button @onclick="()=>GetPicturePath(picture.IdPictures , product.IdProduct)">
                    <img src="~/../images/ProductsImages/Pictures/@picture.UrlPicture" class="img-fluid" style="height:100px" alt="@product.SeoName" />
                </button>



            }
            <h1 class="cardTitle">@product.Name</h1>
            <p class=" cardLinkContainer">
                @if (product.Quantity > 0)
                {
                    <span>@product.SalesPrice</span>
                    <button class="btn btn-primary" type="button" @onclick="()=>GetAddToCart(product.IdProduct)"> + </button>
                    <button class="btn btn-primary" type="button" @onclick="()=>RemoveCartItem(product.IdProduct)"> - </button>

                }
                else
                {
                    <button class="btn btn-dark btnAddAcc d-block">
                        Rupture de stock
                    </button>
                }

            </p>

        </div>
    }
}
<div>
    <p><a href="Home/Order">Payer</a></p>

    @foreach (var prod in ProductsIncludePictures.ToList())
    {
        @if (_Cart != null)
        {

            foreach (var cart in _Cart.ListProducts.ToList().Where(a => a.ProductId == prod.IdProduct))
            {
                cart.ProductPrice = prod.SalesPrice;
                cart.ProductName = prod.Name;
                cart.Total = cart.Total;
                cart.ProductName = prod.Name;
                var tva = (cart.Total * cart.TVA);
                var TTC = cart.Total + tva;
                <p>--------------------</p>
                <div>
                    <p>name: @cart.ProductName</p>
                    <p>quantity:@cart.ProductQuantity </p>
                    <p>sales price: @cart.ProductPrice</p>
                    <p>Total par produit Ht: @cart.Total.ToString("C")</p>
                    <p>Total par produit TTC: @TTC.ToString("C")</p>
                </div>
                <p>--------------------</p>


            }

        }


    }
    @if (_Cart != null)
    {

        @if (_Cart.TotalAllItems > 0)
        {
            <span>Total: @_Cart.ListProducts.Sum(a => a.Total)</span>

            <button class="btn btn-danger" type="button" @onclick="ClearBasket">vider le panier</button>
        }
    }
    <p>sssssssssssssssssssss</p>
</div>

@code
{
 

    protected override async Task OnParametersSetAsync()
    {
        _Cart = await LocalStorage.GetItemAsync<Cart>("Cart");

    }

    protected async void GetAddToCart(int id)
    {
        if (_Cart != null)
        {
            //si null je fait une instance
            if (_Cart == null)
            {
                _Cart = new Cart();
            }
            // je recupere le produit que je dois ajouter a Cart
            var productById = ProductsIncludePictures.ToList().Where(a => a.IdProduct == id).FirstOrDefault();
            //je crée CartItem
            _CartItem = _Cart.ListProducts.Where(a => a.ProductId == productById.IdProduct).FirstOrDefault();
            //verif
            //ajout cartItem a Cart
            if (_CartItem != null)
            {
                foreach (var session in _Cart.ListProducts.ToList())
                {
                    if (session.ProductId == productById.IdProduct && session.ProductPrice != productById.SalesPrice)
                    {

                        session.ProductPrice = productById.SalesPrice;

                    }
                }
                if (productById.Quantity > _CartItem.ProductQuantity)
                {
                    _CartItem.ProductQuantity++;

                }
                _CartItem.Total = _CartItem.ProductPrice * _CartItem.ProductQuantity;

            }
            else
            {

                _Cart.ListProducts.Add(
                new CartItem()
                {
                    ProductId = productById.IdProduct,
                    ProductName = productById.Name,
                    ProductPrice = productById.SalesPrice,
                    shippingPrice = productById.ShippingPrice,
                    TVA = productById.Tva,
                    ProductQuantity = 1,
                    Total = productById.SalesPrice,
                    ProductUrlImage = productById.ImageUrl,

                });
            }

            //calcul total...
            _Cart.Total = _Cart.ListProducts.Sum(a => a.Total);
            _Cart.TotalAllItems = _Cart.ListProducts.Sum(t => t.Total);
            //CartItem CartItem =



            await LocalStorage.SetItemAsync("Cart", _Cart);

        }
    }

    //protected async void GetRemoveCartItem(int idProduct)
    //{
    //    if (_Cart != null)
    //    {

    //        RemoveCartItem(idProduct);


    //    }
    //}
    protected void RemoveItem(int id)
    {
        _Cart.ListProducts.Remove(_Cart.ListProducts.Where(a => a.ProductId == Convert.ToInt64(id)).FirstOrDefault());
        _Cart.TotalAllItems = _Cart.ListProducts.Sum(a => a.Total);
        _Cart.Total = _Cart.ListProducts.Sum(a => a.Total);

    }
    protected async Task RemoveCartItem(int idProduct)
    {
        if (_Cart != null)
        {
            _CartItem = _Cart.ListProducts.FirstOrDefault(a => a.ProductId == idProduct);
            if (_CartItem != null)
            {
                if (_CartItem.ProductQuantity > 0)
                {
                    _CartItem.ProductQuantity = _CartItem.ProductQuantity - 1;

                    _CartItem.Total = _CartItem.Total - _CartItem.ProductPrice;

                    //calcul total...
                    _Cart.Total = _Cart.ListProducts.Sum(a => a.Total);
                    _Cart.TotalAllItems = _Cart.ListProducts.Sum(t => t.Total);

                }
                if (_CartItem.ProductQuantity == 0)
                {
                    RemoveItem(_CartItem.ProductId);
                }
                await LocalStorage.SetItemAsync("Cart", _Cart);
            }

        }


    }
    protected async Task ClearBasket()
    {
        if (_Cart != null)
        {
            await LocalStorage.ClearAsync();
            _Cart = await LocalStorage.GetItemAsync<Cart>("Cart");
        }
    }

    public void GetPicturePath(int idPicture, int idProduct)
    {

        foreach (var prod in ProductsIncludePictures.Where(a => a.IdProduct == idProduct))
        {
            foreach (var pics in prod.Pictures.Where(a => a.IdProduct_Fk == idProduct && a.IdPictures == idPicture))
            {

                prod.ImageUrl = "Pictures/" + pics.UrlPicture;

            }
        }
    }


}
